#!/usr/bin/env python3

#######################################################################
# -*- c-basic-offset: 8 -*-
# Copyright (c) 2015-2019 National Technology & Engineering Solutions
# of Sandia, LLC (NTESS). Under the terms of Contract DE-NA0003525 with
# NTESS, the U.S. Government retains certain rights in this software.
# Copyright (c) 2015-2019 Open Grid Computing, Inc. All rights reserved.
#
# This software is available to you under a choice of one of two
# licenses.  You may choose to be licensed under the terms of the GNU
# General Public License (GPL) Version 2, available from the file
# COPYING in the main directory of this source tree, or the BSD-type
# license below:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#      Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#      Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#      Neither the name of Sandia nor the names of any contributors may
#      be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
#      Neither the name of Open Grid Computing nor the names of any
#      contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#      Modified source versions must be plainly marked as such, and
#      must not be misrepresented as being the original software.
#
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#######################################################################

from __future__ import print_function
import struct
import cmd
import argparse
import sys
import os
import traceback
import json
import re

from ldmsd import ldmsd_config, ldmsd_util
from ldmsd.ldmsd_request import LDMSD_Message
import errno

class LdmsdCmdParser(cmd.Cmd):
    def __init__(self, host = None, port = None, xprt = None, infile=None,
                 auth=None, auth_opt=None):
        self.msg_no = 0

        if host and port:
            self.ctrl = ldmsd_config.ldmsdInbandConfig(host = host,
                                                   port = port,
                                                   xprt = xprt,
                                                   auth = auth,
                                                   auth_opt = auth_opt)
            self.prompt = "{0}:{1}:{2}> ".format(xprt, host, port)
        else:
            self.ctrl = None
            self.prompt = "(not connected)> "

        if infile:
            cmd.Cmd.__init__(self, stdin=infile)
        else:
            cmd.Cmd.__init__(self)

    def msg_no_get(self):
        self.msg_no += 1
        return self.msg_no

    def emptyline(self):
        pass

    def __check_command_syntax(self, attr_value):
        tokens = attr_value.split(" ")
        for tk in tokens:
            if tk.endswith("="):
                return False
        return True

    def communicate(self, json_obj, json_str):
        req = LDMSD_Message(self.ctrl)
        req.send(LDMSD_Message.LDMSD_MSG_TYPE_REQ, json_obj, json_str)
        rsp = LDMSD_Message(self.ctrl)
        rsp.receive()
        return rsp.json_ent

    def generic_resp(self, rsp):
        if rsp["status"] != 0:
            if "msg" in rsp.keys():
                print(rsp["msg"])

    def do_shell(self, args):
        """
        Execute a shell command
        """
        os.system(args)

    def do_comment(self, args):
        """
        skip comments
        """
        pass

    def do_say(self, args):
        """
        Print a message to the console
        """
        print(args)

    def do_connect(self, args):
        """
        Connect to an LDMS daemon
        Parameters:
        xprt=     The transport name [sock, rdma, ugni] (default: sock)
        host=     The hostname of the host (default: localhost)
        port=     The port number on which the LDMS is listening
        auth=     The authentication method (default: none)

        Other ATTR=VALUE parameters will be passed to authentication plugin.
        """
        if self.ctrl:
            print("WARN: Already connected, do nothing.")
            return None
        kwargs = {
                "xprt": "sock",
                "host": "localhost",
                "port": None,
                "auth": "none",
                "auth_opt": {},
            }
        r = re.compile("\s*(\w+)=(\w+)")
        for attr, value in r.findall(args):
            if attr in kwargs:
                kwargs[attr] = value
            else:
                # treat as auth options
                kwargs["auth_opt"][attr] = value
        self.ctrl = ldmsd_config.ldmsdInbandConfig(**kwargs)
        self.prompt = "{0}:{1}:{2}> ".format(kwargs["xprt"],
                                             kwargs["host"],
                                             kwargs["port"])

    def complete_connect(self, text, line, begidx, endidx):
        name_list = ["xprt=", "host=", "port=", "auth="]
        full_list = ["xprt=(sock|rdma|ugni)",
                     "host=HOSTNAME",
                     "port=PORT",
                     "auth=AUTH_METHOD"]
        if not text:
            return full_list
        return [x for x in name_list if x.startswith(text)]

    def precmd(self, line):
        if line[0:1] == '#':
            return ''
        return line

    def read_none_tty(self, fin):
        for cmd in fin:
            self.onecmd(cmd)

    def do_json(self, arg):
        """
        json JSON_REQUEST_OBJECT

        Send the given JSON request object to the ldmsd and print the response.

        """
        rsp = self.communicate(None, arg)
        print(json.dumps(rsp, indent=2))

    def do_daemon_exit(self, arg):
        req = { "request"   : "update",
                "id"        : self.msg_no_get(),
                "schema"    : "daemon",
                "enabled"   : False,
                "spec"      : { "startup" : {}}
                }
        rsp = self.communicate(req, None)
        self.generic_resp(rsp)

    def do_version(self, arg):
        req = { "request"   : "version",
                "id"        : self.msg_no_get()
              }
        rsp = self.communicate(req, None)
        if rsp["status"] == 0:
            print("LDMS Version: {}".format(rsp["result"]["LDMS Version"]))
            print("LDMSD Version: {}".format(rsp["result"]["LDMSD Version"]))
        else:
            if "msg" in rsp.keys():
                print(rsp["msg"])

    def do_set_route(self, args):
        """
        set_route SET_INSTANCE_NAME
        
        Display the route of the given set. The reporeted order is from
        the LDMSD received the request from ldmsd_controller.
        """
        req = { "request"   : "set_route",
                "id"        : self.msg_no_get(),
                "spec"      : {"instance": args}
              }
        rsp = self.communicate(req, None)
        if 0 != rsp["status"]:
            if "msg" in rsp.keys():
                print(rsp["msg"])
        if "result" not in rsp.keys():
            return

        print("-------------------")
        print("instance : {}".format(rsp["result"]["instance"]))
        if "schema" in rsp["result"].keys():
            print("schema   : {}".format(rsp["result"]["schema"]))
        print("===================")
        print("{0:20} {1:15} {2:25} {3:20}".format(
              "LDMSD name", "Type", "Plugin Instance Name", "Producer Name"))
        
        rsp["result"].pop('instance', None)
        rsp["result"].pop('schema', None)

        from collections import OrderedDict
        result = OrderedDict(rsp["result"])
        
        for pos, hop in result.items():
            if "msg" in hop.keys():
                print("{0:20} -- {1} --".format(hop['name'], hop['msg']))
            else:
                print("{0:20} {1:15} {2:25} {3:20}".format(
                    hop['name'], hop['type'], 
                    hop['plugin'] if "plugin" in hop.keys() else "",
                    hop['producer'] if "producer" in hop.keys() else ""))
        

    def do_notify(self, arg):
        """
        notify JSON_NOTIFICATION_OBJECT

        Send the given notification message to the ldmsd.
        """
        req = LDMSD_Message(self.ctrl)
        req.send(LDMSD_Message.LDMSD_MSG_TYPE_NOTIFY, None, arg)

    def do_source(self, arg):
        """
        Parse commands from the specified file as if they were entered
        on the console.
        """
        script = open(arg, 'r')
        self.read_none_tty(script)
        for cmd in script:
            self.onecmd(cmd)
        script.close()

    def do_script(self, arg):
        """
        Execute the given executable file and submit the resulting configuration to LDMSD
        Example:
            script /path/to/executable
        """
        exit_code, out, err = ldmsd_util.sh_exec(arg)
        if exit_code != 0:
            print("Script exited with code {0} and error: {1}".format(exit_code, err))
            return
        cfg = out.split("\n")
        for cmd in cfg:
            self.onecmd(cmd)

    def do_EOF(self, arg):
        """
        Ctrl-D will exit the shell
        """
        return True

    def do_quit(self, arg):
        """
        Quit the LDMSD shell
        """
        if self.ctrl:
            self.ctrl.close()
        return True

    def __ts2human(self, sec, usec):
        from datetime import datetime
        ts = float(sec)
        ts_sec = datetime.fromtimestamp(ts).strftime('%m-%d-%y %H:%M:%S')
        ts_str = "{0} [{1}]".format(ts_sec, usec)
        return ts_str

    def parseline(self, line):
        """Parse the line into a command name and a string containing
        the arguments.  Returns a tuple containing (command, args, line).
        'command' and 'args' may be None if the line couldn't be parsed.
        Allows # comments to begin lines, and dispatches these to do_comment
        when present.
        """
        line = line.strip()
        if not line:
            return None, None, line
        elif line[0] == '?':
            line = 'help ' + line[1:]
        elif line[0] == '!':
            if hasattr(self, 'do_shell'):
                line = 'shell ' + line[1:]
            else:
                return None, None, line
        elif line[0] == '#':
            if hasattr(self, 'do_comment'):
                line = 'comment ' + line[1:]
            else:
                return None, None, line
        i, n = 0, len(line)
        while i < n and line[i] in self.identchars: i = i+1
        cmd, arg = line[:i], line[i:].strip()
        return cmd, arg, line


if __name__ == "__main__":
    is_debug = True
    try:
        parser = argparse.ArgumentParser(description="Configure an LDMS Daemon. " \
                                         "To connect to an ldmsd, either give " \
                                         "the socket path of the ldmsd or " \
                                         "give both hostname and inet control port. " \
                                         "If all are given, the sockname takes the priority.")
        parser.add_argument('--host',
                            help = "Hostname of ldmsd to connect to",
                            default = 'localhost')
        parser.add_argument('--port',
                            help = "Inet ctrl listener port of ldmsd")
        parser.add_argument('--xprt',
                            help = "LDMS Transport type: sock, ugni, rdma.",
                            choices = ['sock', 'ugni', 'rdma'],
                            default = 'sock')
        parser.add_argument('--source',
                            help = "Path to the config file")
        parser.add_argument('--script',
                            help = "Execute the script and send the output \
                            commands to the connected ldmsd")
        parser.add_argument('--cmd',
                            help = "Command to be sent to an LDMSD")
        parser.add_argument('-a', '--auth',
                            help = "Authentication method.");
        parser.add_argument('-A', '--auth-arg', action = 'append',
                            help = "Authentication arguments (name=value). \
                                    This option can be given multiple times.")
        parser.add_argument('--debug', action = "store_true",
                            help = argparse.SUPPRESS)

        args = parser.parse_args()

        is_debug = args.debug

        auth_opt = None
        if args.auth_arg:
            auth_opt = dict()
            rx = re.compile("(\w+)=(.+)")
            for arg in args.auth_arg:
                m = rx.match(arg)
                if not m:
                    print("Expceting --auth-arg to be NAME=VALUE")
                    sys.exit(1)
                (k, v) = m.groups()
                auth_opt[k] = v

        cmdParser = LdmsdCmdParser(host = args.host,
                                   port = args.port,
                                   xprt = args.xprt,
                                   auth = args.auth,
                                   auth_opt = auth_opt)

        if args.source is not None or args.script is not None or args.cmd is not None:
            if args.source is not None:
                cmdParser.do_source(args.source)
            if args.script is not None:
                cmdParser.do_script(args.script)
            if args.cmd is not None:
                cmdParser.onecmd(args.cmd)
            cmdParser.do_quit(None)
        else:
            if sys.stdin.isatty() is False:
                cmdParser.read_none_tty(sys.stdin)
                cmdParser.do_quit(None)
            else:
                cmdParser.cmdloop("Welcome to the LDMSD control processor")
    except KeyboardInterrupt:
        sys.exit(0)
    except Exception as e:
        if is_debug:
            raise
        else:
            print(e)
